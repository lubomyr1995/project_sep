# Generated by Django 5.1.2 on 2024-10-14 19:57

import django.core.validators
from django.db import migrations, models

import apps.users.managers


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[
                    django.core.validators.RegexValidator('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$',
                                                          ['email must contain "@" symbol',
                                                           'email must have at least one character before "@"',
                                                           'email must have a valid domain after "@" (e.g. example.com)',
                                                           'email must have at least one dot (.) after the domain name',
                                                           'email domain extension must be 2 to 6 characters long (e.g. .com, .co.uk)',
                                                           'email can contain alphanumeric characters, periods (.), hyphens (-), and underscores (_)'])])),
                ('password', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(
                    '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])(\\S){8,30}$',
                    ['password must contain 1 number (0 - 9)', 'password must contain min 1 uppercase letter',
                     'password must contain min 1 lowercase letter',
                     'password must contain min 1 alphanumeric character',
                     'password min 8 max 30 characters without spaces'])], verbose_name='password')),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'ordering': ['-id'],
            },
            managers=[
                ('objects', apps.users.managers.UserManager()),
            ],
        ),
    ]
